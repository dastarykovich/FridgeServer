// <auto-generated />
using System;
using Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FridgeServer.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20221026222241_DatabaseCreation")]
    partial class DatabaseCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Fridge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("name");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("owner_name");

                    b.HasKey("Id");

                    b.ToTable("fridge");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da0ff40e-b6e2-4bd5-8aea-09b4dc0e2fd2"),
                            Name = "Minsk-3-92",
                            OwnerName = "Jack"
                        },
                        new
                        {
                            Id = new Guid("dc4ee6c9-d1d9-49f7-b303-87bf677370e5"),
                            Name = "Minsk-3-93",
                            OwnerName = "Jack"
                        },
                        new
                        {
                            Id = new Guid("52d93cfa-01b4-48fc-8df4-d10cd4dc16c5"),
                            Name = "Zakat-530-6",
                            OwnerName = "John"
                        },
                        new
                        {
                            Id = new Guid("078d1633-e04d-4779-99aa-9f136fd5d725"),
                            Name = "Life is Avesome-35-790",
                            OwnerName = "Richard"
                        },
                        new
                        {
                            Id = new Guid("5163522d-f7fc-422a-8f94-53cec73fdb1b"),
                            Name = "Samcon 555-2012",
                            OwnerName = "Jessica"
                        },
                        new
                        {
                            Id = new Guid("5e7b0ffb-ee66-4a47-9a5a-bb9e5649dc15"),
                            Name = "Samson 543-0098"
                        });
                });

            modelBuilder.Entity("Entities.Models.FridgeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id");

                    b.Property<Guid>("FridgeId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("fridge_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("name");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("FridgeId");

                    b.ToTable("fridge_model");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f06e64b5-81e8-4b8e-8636-00f7d298bc65"),
                            FridgeId = new Guid("da0ff40e-b6e2-4bd5-8aea-09b4dc0e2fd2"),
                            Name = "Minsk-3",
                            Year = 2012
                        },
                        new
                        {
                            Id = new Guid("fabe64b5-81e8-4b8e-8636-00f7d298bc65"),
                            FridgeId = new Guid("dc4ee6c9-d1d9-49f7-b303-87bf677370e5"),
                            Name = "Minsk-3.1",
                            Year = 2012
                        },
                        new
                        {
                            Id = new Guid("34c233a2-ef55-4353-8c41-01ed03be2213"),
                            FridgeId = new Guid("52d93cfa-01b4-48fc-8df4-d10cd4dc16c5"),
                            Name = "Zakat-530",
                            Year = 1990
                        },
                        new
                        {
                            Id = new Guid("1eb04337-c367-4626-a831-0b44e39ce68d"),
                            FridgeId = new Guid("078d1633-e04d-4779-99aa-9f136fd5d725"),
                            Name = "LA-35",
                            Year = 2017
                        },
                        new
                        {
                            Id = new Guid("6e529b9f-bb5e-4552-9038-653feef2a72b"),
                            FridgeId = new Guid("5163522d-f7fc-422a-8f94-53cec73fdb1b"),
                            Name = "Samson-555",
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("7a4b06ea-f42f-4579-8ea3-4a9191b2c5f8"),
                            FridgeId = new Guid("5e7b0ffb-ee66-4a47-9a5a-bb9e5649dc15"),
                            Name = "Samson-543",
                            Year = 2022
                        });
                });

            modelBuilder.Entity("Entities.Models.FridgeProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id");

                    b.Property<Guid>("FridgeId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("fridge_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("FridgeId");

                    b.HasIndex("ProductId");

                    b.ToTable("fridge_products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c25a81be-7c84-41ea-8eff-08c309c2d9db"),
                            FridgeId = new Guid("da0ff40e-b6e2-4bd5-8aea-09b4dc0e2fd2"),
                            ProductId = new Guid("abd39727-ec5a-4668-b0b4-ef565fdd2b56"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("cecdb562-9ffd-4c7e-bf61-2db806bfae0b"),
                            FridgeId = new Guid("da0ff40e-b6e2-4bd5-8aea-09b4dc0e2fd2"),
                            ProductId = new Guid("9801551f-96b6-4b05-8b6b-d48b47e9afce"),
                            Quantity = 2
                        },
                        new
                        {
                            Id = new Guid("bde194d8-d5b2-4a5f-abc8-0614f3a282e9"),
                            FridgeId = new Guid("da0ff40e-b6e2-4bd5-8aea-09b4dc0e2fd2"),
                            ProductId = new Guid("fef09ae0-3216-4da9-9b78-28075d573314"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("f16b2b79-b008-4ec1-b85e-dabc5067db97"),
                            FridgeId = new Guid("da0ff40e-b6e2-4bd5-8aea-09b4dc0e2fd2"),
                            ProductId = new Guid("71c77130-16cd-4eec-a77a-dc16420cf403"),
                            Quantity = 12
                        },
                        new
                        {
                            Id = new Guid("0d629689-f3fc-46ca-a9c5-ea7f09c937ac"),
                            FridgeId = new Guid("da0ff40e-b6e2-4bd5-8aea-09b4dc0e2fd2"),
                            ProductId = new Guid("d28eee52-2142-4b0d-95ed-59237deeb414"),
                            Quantity = 12
                        },
                        new
                        {
                            Id = new Guid("f4da4fda-5f6d-4eb6-8fe9-950ed3fa88ca"),
                            FridgeId = new Guid("dc4ee6c9-d1d9-49f7-b303-87bf677370e5"),
                            ProductId = new Guid("abd39727-ec5a-4668-b0b4-ef565fdd2b56"),
                            Quantity = 4
                        },
                        new
                        {
                            Id = new Guid("2bf7355f-70ea-4507-81ea-276d80079511"),
                            FridgeId = new Guid("dc4ee6c9-d1d9-49f7-b303-87bf677370e5"),
                            ProductId = new Guid("9801551f-96b6-4b05-8b6b-d48b47e9afce"),
                            Quantity = 7
                        },
                        new
                        {
                            Id = new Guid("af639e0c-db59-4d70-9892-546e02ebc5a6"),
                            FridgeId = new Guid("dc4ee6c9-d1d9-49f7-b303-87bf677370e5"),
                            ProductId = new Guid("fef09ae0-3216-4da9-9b78-28075d573314"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("bc8cd3fc-e2c1-4a6c-8308-2262f8c3c646"),
                            FridgeId = new Guid("dc4ee6c9-d1d9-49f7-b303-87bf677370e5"),
                            ProductId = new Guid("71c77130-16cd-4eec-a77a-dc16420cf403"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("64f0b443-d2a1-4887-9e3b-4baf24ef86a9"),
                            FridgeId = new Guid("dc4ee6c9-d1d9-49f7-b303-87bf677370e5"),
                            ProductId = new Guid("d28eee52-2142-4b0d-95ed-59237deeb414"),
                            Quantity = 9
                        },
                        new
                        {
                            Id = new Guid("12a2425e-ce46-491f-a2b2-cb6946a1b947"),
                            FridgeId = new Guid("52d93cfa-01b4-48fc-8df4-d10cd4dc16c5"),
                            ProductId = new Guid("abd39727-ec5a-4668-b0b4-ef565fdd2b56"),
                            Quantity = 3
                        },
                        new
                        {
                            Id = new Guid("6c63bcfc-4f56-4f7c-9ab3-e52bc5ab2f12"),
                            FridgeId = new Guid("52d93cfa-01b4-48fc-8df4-d10cd4dc16c5"),
                            ProductId = new Guid("9801551f-96b6-4b05-8b6b-d48b47e9afce"),
                            Quantity = 8
                        },
                        new
                        {
                            Id = new Guid("20758e2b-f948-43df-abc0-1c5f8f78db2c"),
                            FridgeId = new Guid("52d93cfa-01b4-48fc-8df4-d10cd4dc16c5"),
                            ProductId = new Guid("fef09ae0-3216-4da9-9b78-28075d573314"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("4245a68c-9e6c-4dd3-b2e9-520a0a31e858"),
                            FridgeId = new Guid("52d93cfa-01b4-48fc-8df4-d10cd4dc16c5"),
                            ProductId = new Guid("71c77130-16cd-4eec-a77a-dc16420cf403"),
                            Quantity = 5
                        },
                        new
                        {
                            Id = new Guid("49b40553-e7b5-404d-a17b-051c07f1ed5a"),
                            FridgeId = new Guid("52d93cfa-01b4-48fc-8df4-d10cd4dc16c5"),
                            ProductId = new Guid("d28eee52-2142-4b0d-95ed-59237deeb414"),
                            Quantity = 2
                        },
                        new
                        {
                            Id = new Guid("7b03eba1-2e53-437e-8db5-17fc63781db2"),
                            FridgeId = new Guid("5163522d-f7fc-422a-8f94-53cec73fdb1b"),
                            ProductId = new Guid("abd39727-ec5a-4668-b0b4-ef565fdd2b56"),
                            Quantity = 4
                        },
                        new
                        {
                            Id = new Guid("245c76b2-d351-4dae-ba7f-5f8759088251"),
                            FridgeId = new Guid("5163522d-f7fc-422a-8f94-53cec73fdb1b"),
                            ProductId = new Guid("9801551f-96b6-4b05-8b6b-d48b47e9afce"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("2db1f5bf-4ee2-4f48-96cf-8692b9c25386"),
                            FridgeId = new Guid("5163522d-f7fc-422a-8f94-53cec73fdb1b"),
                            ProductId = new Guid("fef09ae0-3216-4da9-9b78-28075d573314"),
                            Quantity = 8
                        },
                        new
                        {
                            Id = new Guid("88fe0f6b-7c29-4cc2-8c73-660ab3ed1450"),
                            FridgeId = new Guid("5163522d-f7fc-422a-8f94-53cec73fdb1b"),
                            ProductId = new Guid("71c77130-16cd-4eec-a77a-dc16420cf403"),
                            Quantity = 7
                        },
                        new
                        {
                            Id = new Guid("bd4caa58-2d24-48cd-811e-7c6db7ae09dc"),
                            FridgeId = new Guid("5163522d-f7fc-422a-8f94-53cec73fdb1b"),
                            ProductId = new Guid("d28eee52-2142-4b0d-95ed-59237deeb414"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("54f0c572-37b7-4175-ae07-37ddc69890ea"),
                            FridgeId = new Guid("078d1633-e04d-4779-99aa-9f136fd5d725"),
                            ProductId = new Guid("abd39727-ec5a-4668-b0b4-ef565fdd2b56"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("966c57cd-a166-4f31-a24d-3a295c10c3b0"),
                            FridgeId = new Guid("078d1633-e04d-4779-99aa-9f136fd5d725"),
                            ProductId = new Guid("9801551f-96b6-4b05-8b6b-d48b47e9afce"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("537437c0-e82e-4c8d-aaa1-d392dee0c91c"),
                            FridgeId = new Guid("078d1633-e04d-4779-99aa-9f136fd5d725"),
                            ProductId = new Guid("fef09ae0-3216-4da9-9b78-28075d573314"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("1815718f-68ae-40f0-b6c6-148d2a40379f"),
                            FridgeId = new Guid("078d1633-e04d-4779-99aa-9f136fd5d725"),
                            ProductId = new Guid("71c77130-16cd-4eec-a77a-dc16420cf403"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("097224a1-3b22-4c14-99b3-f52ae82c07fd"),
                            FridgeId = new Guid("078d1633-e04d-4779-99aa-9f136fd5d725"),
                            ProductId = new Guid("d28eee52-2142-4b0d-95ed-59237deeb414"),
                            Quantity = 4
                        },
                        new
                        {
                            Id = new Guid("52a3760f-e0c9-4ea5-b873-40ac8664e132"),
                            FridgeId = new Guid("5e7b0ffb-ee66-4a47-9a5a-bb9e5649dc15"),
                            ProductId = new Guid("abd39727-ec5a-4668-b0b4-ef565fdd2b56"),
                            Quantity = 0
                        },
                        new
                        {
                            Id = new Guid("ddfcb278-84ca-4697-a5bc-26d007195357"),
                            FridgeId = new Guid("5e7b0ffb-ee66-4a47-9a5a-bb9e5649dc15"),
                            ProductId = new Guid("9801551f-96b6-4b05-8b6b-d48b47e9afce"),
                            Quantity = 7
                        },
                        new
                        {
                            Id = new Guid("2b0b5ef4-3823-4a53-ab89-db8be180c93d"),
                            FridgeId = new Guid("5e7b0ffb-ee66-4a47-9a5a-bb9e5649dc15"),
                            ProductId = new Guid("fef09ae0-3216-4da9-9b78-28075d573314"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("e7556fe3-cf1d-4727-b651-afca7af94214"),
                            FridgeId = new Guid("5e7b0ffb-ee66-4a47-9a5a-bb9e5649dc15"),
                            ProductId = new Guid("71c77130-16cd-4eec-a77a-dc16420cf403"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("68241a3d-af08-426a-acd8-8d844e3f3733"),
                            FridgeId = new Guid("5e7b0ffb-ee66-4a47-9a5a-bb9e5649dc15"),
                            ProductId = new Guid("d28eee52-2142-4b0d-95ed-59237deeb414"),
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("id");

                    b.Property<int>("DefaultQuantity")
                        .HasColumnType("int")
                        .HasColumnName("default_quantity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abd39727-ec5a-4668-b0b4-ef565fdd2b56"),
                            DefaultQuantity = 2,
                            Name = "Milk"
                        },
                        new
                        {
                            Id = new Guid("9801551f-96b6-4b05-8b6b-d48b47e9afce"),
                            DefaultQuantity = 1,
                            Name = "Cheese"
                        },
                        new
                        {
                            Id = new Guid("fef09ae0-3216-4da9-9b78-28075d573314"),
                            DefaultQuantity = 5,
                            Name = "Coke"
                        },
                        new
                        {
                            Id = new Guid("d28eee52-2142-4b0d-95ed-59237deeb414"),
                            DefaultQuantity = 2,
                            Name = "Pelmeni"
                        },
                        new
                        {
                            Id = new Guid("71c77130-16cd-4eec-a77a-dc16420cf403"),
                            DefaultQuantity = 3,
                            Name = "Apple"
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ee916832-ff98-44c1-bfd6-32c50be6b2dc",
                            ConcurrencyStamp = "c8431e4a-6eb5-4f99-bb96-759ae353d1f5",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "3d028b1b-695f-40c7-a712-bb515a787c64",
                            ConcurrencyStamp = "53839e66-0a98-4f53-8b81-4ff4d55828f6",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.FridgeModel", b =>
                {
                    b.HasOne("Entities.Models.Fridge", "Fridge")
                        .WithMany("FridgeModels")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fridge");
                });

            modelBuilder.Entity("Entities.Models.FridgeProduct", b =>
                {
                    b.HasOne("Entities.Models.Fridge", "Fridge")
                        .WithMany("FridgeProducts")
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Product", "Products")
                        .WithMany("FridgeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fridge");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Fridge", b =>
                {
                    b.Navigation("FridgeModels");

                    b.Navigation("FridgeProducts");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Navigation("FridgeProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
